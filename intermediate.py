import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import mysql.connector
import numpy as np

db  =  mysql.connector.connect(host = 'localhost',
                               username = 'root',
                               password = 'Anubhavrajput123890',
                               database = 'ecommerce')

cursor = db.cursor()

#  calculate the number of orders per month in 2018

query = """select monthname(order_purchase_timestamp) months,count(order_id ) order_count from orders where year(order_purchase_timestamp)=2018 group by months """

cursor.execute(query)
data = cursor.fetchall()
df = pd.DataFrame(data,columns=["month","order_count"])
# ax=sns.barplot(x=df["month"],y=df["order_count"])
# plt.xticks(rotation=45)
# ax.bar_label(ax.containers[0])
# plt.show()
# print(df)


# Find the avarage number of products per order,grouped by customer city

query = """with count_per_order as
(select orders.order_id,orders.customer_id,count(order_items.order_id) as oc
from orders join order_items
on orders.order_id =  order_items.order_id
group by orders.order_id,orders.customer_id)

select customers.customer_city, round(avg(count_per_order.oc),2) average_orders 
from customers join count_per_order
on customers.customer_id  = count_per_order.customer_id
group by customers.customer_city order by average_orders  desc"""

cursor.execute(query)
data = cursor.fetchall()
df=pd.DataFrame(data,columns=["city","average_order"])
# df= df.head(10)
# print(df)



# calulate the percentage of total revenue contributed by each products category

query = """select products.product_category category,round((sum(payments.payment_value)/(select sum(payment_value)from payments))*100,2) sales
from products join order_items on products.product_id =order_items.product_id join payments
on payments.order_id = order_items.order_id
group by category order by sales desc """

cursor.execute(query)
data = cursor.fetchall()
df = pd.DataFrame(data,columns=["category","contribution-%"])
# df= df.head(10)
# print(df)



# Identify the correlation between product price and the number of times a product has been purchased

query = """select products.product_category,
count(order_items.product_id),
round(avg(order_items.price),2)
from products join order_items
on products.product_id = order_items.product_id
group by products.product_category """

cursor.execute(query)
data = cursor.fetchall()
df = pd.DataFrame(data,columns=["category","order_count","price"])

arr1 = df["order_count"]
arr2 = df["price"]

# correlation = np.corrcoef(arr1,arr2)
# print(correlation)



# calculate the total revenue generated by each seller , rank them by revenue

query = """select * , dense_rank() over(order by revenue desc) as rn from 
(select order_items.seller_id, 
round(sum(payments.payment_value),2) revenue 
from order_items join payments
on order_items.order_id = payments.order_id
group by order_items.seller_id ) as a; """

cursor.execute(query)
data = cursor.fetchall()
df = pd.DataFrame(data,columns=["seller_id","revenue","rank"])
df= df.head(5)
sns.barplot(x="seller_id",y="revenue",data=df)
plt.xticks(rotation = 90)
plt.show()
# print(df)